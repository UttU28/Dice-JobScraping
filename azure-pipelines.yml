trigger: 
  - main
  # - none

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'dicePipeline'
  containerRegistry: 'dockerSC'

  acrName: 'thisacr'
  imageName: 'dicedatascraping'
  imageTag: 'latest'

  imageRepository: '$(acrName).azurecr.io/$(imageName)'
  artifactName: '$(imageName)_ARTIFACT'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'

jobs:
  - job: GetSecrets
    displayName: 'Get Secrets from Key Vault'
    steps:
    - task: AzureKeyVault@2
      displayName: 'Get Secrets from Key Vault'
      inputs:
        azureSubscription: '$(azureSubscription)'
        KeyVaultName: 'thisdicekeyvault'
        SecretsFilter: '*'
        RunAsPreJob: true

  # - job: Build
  #   displayName: 'Build Container Image'
  #   dependsOn: GetSecrets
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   steps:
  #   - task: Docker@2
  #     displayName: 'Login to ACR'
  #     inputs:
  #       containerRegistry: 'dockerSC'
  #       command: 'login'
  #   - task: Docker@2
  #     displayName: Build and push an image to container registry
  #     inputs:
  #       containerRegistry: '$(containerRegistry)'
  #       repository: '$(imageName)'
  #       command: build
  #       Dockerfile: '$(dockerfilePath)'
  #       tags: '$(imageTag)art'
  #   - task: Bash@3
  #     displayName: Save Docker Image
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         docker save $(imageRepository):$(imageTag)art -o $(Pipeline.Workspace)/$(imageName).tar
  #   - task: PublishPipelineArtifact@1
  #     displayName: Publish the Artifact
  #     inputs:
  #       targetPath: '$(Pipeline.Workspace)/$(imageName).tar'
  #       artifact: '$(artifactName)'
  #       publishLocation: 'pipeline'

  
  # - job: DeployToACR
  #   displayName: 'Deploy to Azure Container Registry'
  #   dependsOn: Build
  #   # dependsOn: CreateAppServicePlan
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   steps:
  #     - task: DownloadPipelineArtifact@2
  #       inputs:
  #         buildType: 'current'
  #         artifact: '$(artifactName)'
  #         targetPath: '$(Pipeline.Workspace)'
  #     - task: Bash@3
  #       displayName: Load Docker Image
  #       inputs:
  #         targetType: 'inline'
  #         script: |      
  #           docker load --input $(Pipeline.Workspace)/$(imageName).tar
  #           docker tag $(imageRepository):$(imageTag)art $(imageRepository):$(imageTag)
  #     - task: Docker@2
  #       displayName: Push an image to container registry
  #       inputs:
  #         containerRegistry: '$(containerRegistry)'
  #         repository: '$(imageName)'
  #         command: push
  #         Dockerfile: '$(dockerfilePath)'
  #         tags: '$(imageTag)'
        
  - job: TerraformTasks
    displayName: 'Terraform Tasks'
    # dependsOn: DeployToACR
    dependsOn: GetSecrets
    steps:
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
      displayName: 'Install Terraform'

    - task: AzureCLI@2
      displayName: 'Terraform INIT'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        addSpnToEnvironment: true
        scriptLocation: inlineScript
        inlineScript: |
          echo "ARM_CLIENT_ID=${arm-client-id}" > .env
          echo "ARM_CLIENT_SECRET=${arm-client-secret}" > .env
          echo "ARM_TENANT_ID=${arm-tenant-id}" > .env
          echo "ARM_SUBSCRIPTION_ID=${arm-subscription-id}" > .env
          
          # export ARM_CLIENT_ID=6ae75f68-d956-4829-a902-1e86d1998201
          # export ARM_CLIENT_SECRET=vei8Q~tStpzTRKzDr2sPpAFUciprZJjWtvmvha_I
          # export ARM_TENANT_ID=8e2dc2c8-cb38-4b25-91cf-cca92778bd6a
          # export ARM_SUBSCRIPTION_ID=e4cf2944-5342-4787-b990-418828e39bfc

          source .env
          terraform init

    - task: TerraformCLI@1
      displayName: 'Terraform PLAN'
      inputs:
        command: plan
        azureSubscription: '$(azureSubscription)'
        environmentServiceName: '$(azureSubscription)'
        runAzLogin: true
        allowTelemetryCollection: true

    # - task: TerraformCLI@1
    #   displayName: 'Terraform APPLY'
    #   inputs:
    #     command: apply
    #     azureSubscription: '$(azureSubscription)'
    #     environmentServiceName: '$(azureSubscription)'
    #     runAzLogin: true
    #     allowTelemetryCollection: true
